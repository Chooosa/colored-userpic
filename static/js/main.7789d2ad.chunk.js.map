{"version":3,"sources":["App.styles.tsx","components/ColoredUserpic/colored-userpick.styles.tsx","components/ColoredUserpic/colored-userpick.component.tsx","assets/avatar.jpg","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Wrapper","styled","div","GradientWrapper","props","size","colorWidth","colors","hoverColors","BackgroundContainer","backgroundColor","margin","Image","img","maxSize","ColoredUserpic","src","App","avatarImg","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uNAEaA,EAAUC,IAAOC,IAAV,kKCOPC,EAAkBF,IAAOC,IAAV,6XAChB,SAAAE,GAAK,OAAIA,EAAMC,QACd,SAAAD,GAAK,OAAIA,EAAMC,QACd,SAAAD,GAAK,OAAIA,EAAME,cAGc,SAAAF,GAAK,OAAIA,EAAMG,OAAO,MAAO,SAAAH,GAAK,OAAIA,EAAMG,OAAO,MAQhD,SAAAH,GAAK,OAAIA,EAAMI,YAAY,MAAO,SAAAJ,GAAK,OAAIA,EAAMI,YAAY,MAU9FC,EAAsBR,IAAOC,IAAV,mNAIT,SAAAE,GAAK,OAAIA,EAAMM,mBACxB,SAAAN,GAAK,OAAIA,EAAMO,UAYhBC,EAAQX,IAAOY,IAAV,kJAGC,SAAAT,GAAK,OAAIA,EAAMU,WACd,SAAAV,GAAK,OAAIA,EAAMU,W,OCPpBC,EA7BuC,SAAC,GAQhD,IAPJC,EAOG,EAPHA,IACAX,EAMG,EANHA,KACAM,EAKG,EALHA,OACAD,EAIG,EAJHA,gBACAH,EAGG,EAHHA,OACAC,EAEG,EAFHA,YACAF,EACG,EADHA,WAEA,OACG,cAACH,EAAD,CACGE,KAAMA,EACNE,OAAQA,EACRC,YAAaA,EACbF,WAAYA,EAJf,SAMG,cAACG,EAAD,CACGC,gBAAiBA,EACjBC,OAAQA,EAFX,SAIG,cAACC,EAAD,CACGI,IAAKA,EACLF,QAAST,EAAOM,EAASL,SCxCzB,MAA0B,mCCsB1BW,MAhBf,WACE,OACE,cAACjB,EAAD,UACE,cAAC,EAAD,CACEgB,IAAKE,EACLb,KAAM,IACNM,OAAQ,EACRD,gBAAgB,MAChBH,OAAQ,CAAC,QAAS,QAClBC,YAAa,CAAC,OAAQ,SACtBF,WAAY,OCFLa,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.7789d2ad.chunk.js","sourcesContent":["import styled from 'styled-components'\n\nexport const Wrapper = styled.div`\n   width: 100vw;\n   height: 100%;\n   min-height: 100vh;\n\n   display: flex;\n   align-items: center;\n   justify-content: center;\n`","import styled from 'styled-components'\n\ninterface GradientWrapperProps {\n   size: number\n   colors: Array<string>\n   hoverColors: Array<string>\n   colorWidth: number\n}\n\nexport const GradientWrapper = styled.div<GradientWrapperProps>`\n   width: ${props => props.size}px;\n   height: ${props => props.size}px;\n   padding: ${props => props.colorWidth}px;\n\n   border-radius: 50%;\n   background: linear-gradient(to right, ${props => props.colors[0]}, ${props => props.colors[1]});\n   transition-duration: 0.5s;\n\n   display: flex;\n   justify-content: center;\n   align-items: center;\n\n   :hover {\n      background: linear-gradient(to right, ${props => props.hoverColors[0]}, ${props => props.hoverColors[1]});\n      transition-duration: 0.5s;\n   }\n`\n\ninterface BackgroundContainerProps {\n   backgroundColor: string\n   margin: number\n}\n\nexport const BackgroundContainer = styled.div<BackgroundContainerProps>`\n   width: 100%;\n   height: 100%;\n\n   background-color: ${props => props.backgroundColor};\n   padding: ${props => props.margin}px;\n\n   border-radius: 50%;\n   display: flex;\n   justify-content: center;\n   align-items: center;\n`\n\ninterface ImageProps {\n   maxSize: number\n}\n\nexport const Image = styled.img<ImageProps>`\n   width: 100%;\n   height: 100%;\n   /* max-width: ${props => props.maxSize}px; */\n   /* max-height: ${props => props.maxSize}px; */\n\n   border-radius: 50%;\n`","import React from 'react'\n\nimport {\n   GradientWrapper,\n   BackgroundContainer,\n   Image\n} from './colored-userpick.styles'\n\ninterface ColoredUserpicProps {\n   src: string\n   size: number\n   margin: number\n   backgroundColor: string\n   colors: Array<string>\n   hoverColors: Array<string>\n   colorWidth: number\n}\n\nconst ColoredUserpic: React.FC<ColoredUserpicProps> = ({\n   src,\n   size,\n   margin,\n   backgroundColor,\n   colors,\n   hoverColors,\n   colorWidth\n}) => {\n   return (\n      <GradientWrapper\n         size={size}\n         colors={colors}\n         hoverColors={hoverColors}\n         colorWidth={colorWidth}\n      >\n         <BackgroundContainer\n            backgroundColor={backgroundColor}\n            margin={margin}\n         >\n            <Image\n               src={src}\n               maxSize={size - margin - colorWidth}\n            />\n         </BackgroundContainer>\n      </GradientWrapper>\n   )\n}\n\nexport default ColoredUserpic","export default __webpack_public_path__ + \"static/media/avatar.2f0a5773.jpg\";","import React from 'react';\n\nimport { Wrapper } from './App.styles'\nimport ColoredUserpic from './components/ColoredUserpic/colored-userpick.component';\nimport avatarImg from './assets/avatar.jpg'\n\nfunction App() {\n  return (\n    <Wrapper>\n      <ColoredUserpic\n        src={avatarImg}\n        size={150}\n        margin={4}\n        backgroundColor='red'\n        colors={['green', 'blue']}\n        hoverColors={['blue', 'green']}\n        colorWidth={6}\n      />\n    </Wrapper>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}